@using EventManager1.Models
@model EventManager1.Models.liveevent
@{
    ViewBag.Title = "LiveStream";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <style>
        video{max-height: 500px;
    background-color: black;}
        @@media (min-width: 320px) and (max-width: 480px) {
  
 .videobox{background-size:contain !important;
background-position:center; height: 187px !important;
    width: 301px!important; margin: auto;}
  
}
        @@media (min-width: 481px) and (max-width: 767px) {
  
 .videobox{background-size:contain !important;
background-position:center; height: 270px !important;
    width: 410px!important; margin: auto;}
  
}
        .join{padding: 7px 10px;
    border: #9a55ff solid 1px;
    display: block;
    text-align: center;
    background:none !important;
    line-height: 25px;
    width: 70%;
    margin: 15px auto;
    color: #9a55ff;
    border-radius: 30px;}
        table{width: 100%;
    padding: 10px;
    border-collapse: inherit;}
    </style>
    <script>

        if (!location.hash.replace('#', '').length) {
            debugger
            var urlnum = (Math.random() * 100).toString().replace('.', '');
            location.href = location.href.split('#')[0] + '#' + urlnum;//(Math.random() * 100).toString().replace('.', '');
            //xhttp.open("Get", "/Stream/savestream?url=" + location.href, true);
            var request = new XMLHttpRequest();
            var eventid = '@ViewBag.ID'
            // Instantiating the request object
            request.open("GET", "/Stream/savestream?url=" + urlnum + "&eventId=" + eventid);
            // Defining event listener for readystatechange event
            request.onreadystatechange = function () {               
            };
            // Sending the request to the server
            request.send();
        }
    </script>

    <link href="../../AssetWebRTC/style.css" rel="stylesheet" />
    <style>
        audio, video {
            -moz-transition: all 1s ease;
            -ms-transition: all 1s ease;
            -o-transition: all 1s ease;
            -webkit-transition: all 1s ease;
            transition: all 1s ease;
            vertical-align: top;
            width: 100%;
        }
        .box {
    border: 1px solid #ccc;
    padding: 30px;
}
        .row{margin:0}
        .videobox {
            height: 530px;
            width: 700px;
            margin:auto;
        }
         h5 {
    font-size: 1.25rem;
    margin-bottom: 0;
}
        input {
            border: 1px solid #d9d9d9;
            border-radius: 1px;
            
            padding: 5px;
            width: 100%;
            height: 40px;
        }

        select {
            border: 1px solid #d9d9d9;
            border-radius: 1px;
            height: 40px;
            margin-left:0;
            padding: 5px;
            margin-top:5px;
            width: 100%;
        }
        .pad10{padding:10px 30px}
        .experiment {
            padding: 10px;
        }

        .setup {
            border-bottom-left-radius: 0;
            border-top-left-radius: 0;
            font-size: 102%;
            height: 40px;
            position: absolute;
        }
    </style>
    <script src="../../AssetWebRTC/DetectRTC.js"></script>
    <script src="../../AssetWebRTC/socket.io.js"></script>
    <script src="../../AssetWebRTC/adapter-latest.js"></script>
    <script src="../../AssetWebRTC/IceServersHandler.js"></script>
    <script src="../../AssetWebRTC/CodecsHandler.js"></script>
    <script src="../../AssetWebRTC/RTCPeerConnection-v1.5.js"></script>
    <script src="../../AssetWebRTC/broadcast.js"></script>
    @*<script src="https://www.webrtc-experiment.com/DetectRTC.js"></script>

        <script src="https://www.webrtc-experiment.com/socket.io.js"> </script>
            <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
            <script src="https://www.webrtc-experiment.com/IceServersHandler.js"></script>
            <script src="https://www.webrtc-experiment.com/CodecsHandler.js"></script>
            <script src="https://www.webrtc-experiment.com/RTCPeerConnection-v1.5.js"> </script>
            <script src="https://www.webrtc-experiment.com/webrtc-broadcasting/broadcast.js"> </script>*@
}
<div class="row">

    <div class="" style="text-align:center; width:100%;">
        <h2>LiveStream</h2>
        <section class="experiment">
            <div class="row">
                <div class="col-md-3 " style="border-right:1px solid #d9d9d9;padding:0">
                    @if (ManageSession.CompanySession != null)
                    {

                        <div class="col-md-12 " style=" padding: 10px;">
                            <span style="display:block"><img src="@Model.image" /></span>
                            <h5>
                                <input type="text" id="broadcast-name" value="@Model.eventName" style="border:none">
                            </h5>
                        </div>

                        <div class="col-md-12 " style=" padding: 10px;">
                            <h5>Select Camera Source</h5>
                            <select id="videoSource">
                                <option>Select Video Input Device</option>

                            </select>
                        </div>
                        <div class="col-md-12 " style=" padding: 10px;">
                           <h5> Select Audio Source</h5>
                            <select id="audioSource">
                                <option>Select Audio Input Device</option>

                            </select>
                        </div>
                        
                        <div class="col-md-12 " style=" padding: 10px;">
                            <a href="#" id="setup-new-broadcast" style="padding: 10px 85px;
    border: #9a55ff solid 1px;display: inline; text-align: center;line-height: 25px;font-weight:bold;    width: 100%;  margin: 0 auto; color:#9a55ff; border-radius: 30px;">Start Streaming</a>
                        </div>
                        <select id="broadcasting-option" style="display:none">
                            <option>Audio + Video</option>
                            <option>Only Audio</option>
                            <option>Screen</option>
                        </select>
                        <select id="audioOutput" style="display:none"></select>
                    }
                    @if (ManageSession.UserSession != null)
                    {
                        <div class="col-md-12 " style=" padding: 10px;">
                            <span style="display:block"><img src="@Model.image" /></span>
                            <h5>
                                <input type="text" id="broadcast-name" value="@Model.eventName" style="border:none">
                            </h5>
                        </div>
                        <table style="width: 100%;" id="rooms-list"></table>
                    }

                                            @*
                            <div class="clearfix"></div>
                            <div id="setupdiv" class="row">
                                <div class="col-md-3">
                                </div><div class="col-md-3">

                                </div><div class="col-md-3">

                                </div><div class="col-md-3">

                                </div>

        
                            </div>*@
                    
                </div>
                <div class="col-md-9">
                    @*<div class="box">
                        <img src="~/images/live-Stream-header.jpg" />
                    </div>*@
                    <!-- local/remote videos container -->
                    <div id="videos-container" class="videobox" style="background-image:url(/images/live-Stream-header.jpg); background-size:contain;background-repeat:no-repeat;    background-size: 680px 500px;" ></div>
                </div>
                <!-- list of all available broadcasting rooms -->
            </div>
                </section>

    </div>
    

    <script>
        // Muaz Khan     - https://github.com/muaz-khan
        // MIT License   - https://www.webrtc-experiment.com/licence/
        // Documentation - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/webrtc-broadcasting
        debugger

        var config = {
            openSocket: function (config) {
                var SIGNALING_SERVER = 'http://18.222.135.45:85/'; //'https://socketio-over-nodejs2.herokuapp.com:443/';//

                config.channel = config.channel || location.href.replace(/\/|:|#|%|\.|\[|\]/g, '');
                var sender = Math.round(Math.random() * 999999999) + 999999999;
                debugger
                io.connect(SIGNALING_SERVER).emit('new-channel', {
                    channel: config.channel,
                    sender: sender
                });

                var socket = io.connect(SIGNALING_SERVER + config.channel);
                socket.channel = config.channel;
                socket.on('connect', function () {
                    if (config.callback) config.callback(socket);
                });

                socket.send = function (message) {
                    socket.emit('message', {
                        sender: sender,
                        data: message
                    });
                };

                socket.on('message', config.onmessage);
            },
            onRemoteStream: function (htmlElement) {
                videosContainer.appendChild(htmlElement);
                //rotateInCircle(htmlElement);
            },

            onRoomFound: function (room) {
                
                var alreadyExist = document.querySelector('button[data-broadcaster="' + room.broadcaster + '"]');
                if (alreadyExist) return;

                if (typeof roomsList === 'undefined') roomsList = document.body;

                var tr = document.createElement('tr');
                tr.innerHTML = '<td><strong>' + room.roomName + '</strong> is broadcasting his media!</br>' +
                    '<button href="#" class="join">Join</button>    </td> ';
                roomsList.appendChild(tr);

                var joinRoomButton = tr.querySelector('.join');
                joinRoomButton.setAttribute('data-broadcaster', room.broadcaster);
                joinRoomButton.setAttribute('data-roomToken', room.broadcaster);
                joinRoomButton.onclick = function () {
                    this.disabled = true;

                    var broadcaster = this.getAttribute('data-broadcaster');
                    var roomToken = this.getAttribute('data-roomToken');
                    broadcastUI.joinRoom({
                        roomToken: roomToken,
                        joinUser: broadcaster
                    });
                    hideUnnecessaryStuff();
                };
            },
            onNewParticipant: function (numberOfViewers) {
                document.title = 'Viewers: ' + numberOfViewers;
            },
            onReady: function () {
                console.log('now you can open or join rooms');
            }
        };

        function setupNewBroadcastButtonClickHandler() {
            debugger
            document.getElementById('broadcast-name').disabled = true;
            document.getElementById('setup-new-broadcast').disabled = true;
            

            DetectRTC.load(function () {
                captureUserMedia(function () {
                    var shared = 'video';
                    if (window.option == 'Only Audio') {
                        shared = 'audio';
                    }
                    if (window.option == 'Screen') {
                        shared = 'screen';
                    }

                    broadcastUI.createRoom({
                        roomName: (document.getElementById('broadcast-name') || {}).value || 'Anonymous',
                        isAudio: shared === 'audio'
                    });
                });
                hideUnnecessaryStuff();
            });
        }

        function captureUserMedia(callback) {
            var constraints = null;
            window.option = broadcastingOption ? broadcastingOption.value : '';
            if (option === 'Only Audio') {
                constraints = {
                    audio: true,
                    video: false
                };

                if (DetectRTC.hasMicrophone !== true) {
                    alert('DetectRTC library is unable to find microphone; maybe you denied microphone access once and it is still denied or maybe microphone device is not attached to your system or another app is using same microphone.');
                }
            }
            if (option === 'Screen') {
                var video_constraints = {
                    mandatory: {
                        chromeMediaSource: 'screen'
                    },
                    optional: []
                };
                constraints = {
                    audio: false,
                    video: video_constraints
                };

                if (DetectRTC.isScreenCapturingSupported !== true) {
                    alert('DetectRTC library is unable to find screen capturing support. You MUST run chrome with command line flag "chrome --enable-usermedia-screen-capturing"');
                }
            }

            if (option != 'Only Audio' && option != 'Screen' && DetectRTC.hasWebcam !== true) {
                alert('DetectRTC library is unable to find webcam; maybe you denied webcam access once and it is still denied or maybe webcam device is not attached to your system or another app is using same webcam.');
            }

            var htmlElement = document.createElement(option === 'Only Audio' ? 'audio' : 'video');

            htmlElement.muted = true;
            htmlElement.volume = 0;

            try {
                htmlElement.setAttributeNode(document.createAttribute('autoplay'));
                htmlElement.setAttributeNode(document.createAttribute('playsinline'));
                htmlElement.setAttributeNode(document.createAttribute('controls'));
            } catch (e) {
                htmlElement.setAttribute('autoplay', true);
                htmlElement.setAttribute('playsinline', true);
                htmlElement.setAttribute('controls', true);
            }

            var mediaConfig = {
                video: htmlElement,
                onsuccess: function (stream) {
                    config.attachStream = stream;

                    videosContainer.appendChild(htmlElement);
                    //rotateInCircle(htmlElement);

                    callback && callback();
                },
                onerror: function () {
                    if (option === 'Only Audio') alert('unable to get access to your microphone');
                    else if (option === 'Screen') {
                        if (location.protocol === 'http:') alert('Please test this WebRTC experiment on HTTPS.');
                        else alert('Screen capturing is either denied or not supported. Are you enabled flag: "Enable screen capture support in getUserMedia"?');
                    } else alert('unable to get access to your webcam');
                }
            };
            if (constraints) mediaConfig.constraints = constraints;
            getUserMedia(mediaConfig);
        }

        var broadcastUI = broadcast(config);

        /* UI specific */
        var videosContainer = document.getElementById('videos-container') || document.body;
        var setupNewBroadcast = document.getElementById('setup-new-broadcast');
        var roomsList = document.getElementById('rooms-list');

        var broadcastingOption = document.getElementById('broadcasting-option');

        if (setupNewBroadcast) setupNewBroadcast.onclick = setupNewBroadcastButtonClickHandler;

        function hideUnnecessaryStuff() {
            var visibleElements = document.getElementsByClassName('visible'),
                length = visibleElements.length;
            for (var i = 0; i < length; i++) {
                visibleElements[i].style.display = 'none';
            }
        }

        function rotateInCircle(video) {
            video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';
            setTimeout(function () {
                video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';
            }, 1000);
        }

    </script>
    <script src="../../AssetWebRTC/GetMediaDevice.js"></script>
    @*<script src="https://www.webrtc-experiment.com/commits.js" async> </script>*@
    @*  <script src="../AssetWebRTC/commits.js"></script>*@
</div>


